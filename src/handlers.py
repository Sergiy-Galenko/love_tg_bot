from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
import random
import string

# –°—Ç–∞–Ω–æ–≤–∏—â–∞ –¥–ª—è —Ä–æ–∑–º–æ–≤–∏
START, NAME, AGE, CITY, CONFIRMATION, SEARCH_PROFILES, EDIT_PROFILE, VIEW_PROFILES, PREMIUM, SUBSCRIPTION, GIFT, ENTER_KEY = range(12)

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ø–∞–º'—è—Ç—ñ
user_profiles = {}
current_profile_index = {}
premium_keys = {}

def generate_unique_key(length=12):
    """Generate a unique key for gifting premium subscription."""
    characters = string.ascii_letters + string.digits
    key = ''.join(random.choice(characters) for i in range(length))
    return key

def get_currency(country_code):
    """Return the currency based on the country code."""
    currency_dict = {
        "US": "USD",
        "UA": "UAH",
        "EU": "EUR",
        "GB": "GBP",
        # –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –∫—Ä–∞—ó–Ω–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
    }
    return currency_dict.get(country_code, "USD")

def get_subscription_benefits(subscription_type, currency):
    benefits = {
        "–ù–∞ —Ç–∏–∂–¥–µ–Ω—å": f"–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:\n- –ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π\n- –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n\n–¶—ñ–Ω–∞: 10 {currency}",
        "–ù–∞ –º—ñ—Å—è—Ü—å": f"–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º—ñ—Å—è—Ü—å:\n- –ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π\n- –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n- –ë–æ–Ω—É—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏\n\n–¶—ñ–Ω–∞: 30 {currency}",
        "–ù–∞ —Ä—ñ–∫": f"–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä—ñ–∫:\n- –ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π\n- –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n- –ë–æ–Ω—É—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏\n- –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó\n\n–¶—ñ–Ω–∞: 300 {currency}",
        "–ù–∞–∑–∞–≤–∂–¥–∏": f"–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞–∑–∞–≤–∂–¥–∏:\n- –ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π\n- –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n- –ë–æ–Ω—É—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏\n- –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó\n- –ü–æ–∂–∏—Ç—Ç—î–≤–∏–π –¥–æ—Å—Ç—É–ø\n\n–¶—ñ–Ω–∞: 1000 {currency}"
    }
    return benefits.get(subscription_type, "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø—ñ–¥–ø–∏—Å–∫–∏")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    await update.message.reply_text(
        f"–í—ñ—Ç–∞—é, {user.first_name}! –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ó–Ω–∞–π–æ–º—Å—Ç–≤–∞")],
                [KeyboardButton("18+")],
                [KeyboardButton("–í–≤–µ—Å—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á")]
            ], 
            resize_keyboard=True
        )
    )
    return START

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == "18+":
        await update.message.reply_text(
            "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º-–∞–∫–∞—É–Ω—Ç.",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("üî¥ –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º")],
                    [KeyboardButton("–ù–∞–∑–∞–¥")]
                ], 
                resize_keyboard=True
            )
        )
        return PREMIUM
    elif choice == "–ó–Ω–∞–π–æ–º—Å—Ç–≤–∞":
        user = update.message.from_user
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–µ:",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton(user.first_name)],
                    [KeyboardButton("–í–≤–µ—Å—Ç–∏ —ñ–Ω—à–µ —ñ–º'—è")]
                ], 
                resize_keyboard=True, one_time_keyboard=True
            )
        )
        return NAME
    elif choice == "–í–≤–µ—Å—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á:")
        return ENTER_KEY

async def enter_key(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    key = update.message.text
    user_id = update.message.from_user.id

    if key in premium_keys:
        duration = premium_keys[key]['duration']
        if user_id not in user_profiles:
            user_profiles[user_id] = {'premium': {}}
        user_profiles[user_id]['premium'] = {
            'status': True,
            'duration': duration
        }
        del premium_keys[key]
        await update.message.reply_text(f"–í–∞—à –ø—Ä–µ–º—ñ—É–º-–∞–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –Ω–∞ {duration}!", reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ó–Ω–∞–π–æ–º—Å—Ç–≤–∞")],
                [KeyboardButton("18+")],
                [KeyboardButton("–í–≤–µ—Å—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á")]
            ], 
            resize_keyboard=True
        ))
    else:
        await update.message.reply_text("–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –Ω–µ–≤—ñ—Ä–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    return START

async def premium_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == "–ù–∞–∑–∞–¥":
        await start(update, context)
        return START
    elif choice == "üî¥ –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º":
        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏:",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–ù–∞ —Ç–∏–∂–¥–µ–Ω—å")],
                    [KeyboardButton("–ù–∞ –º—ñ—Å—è—Ü—å")],
                    [KeyboardButton("–ù–∞ —Ä—ñ–∫")],
                    [KeyboardButton("–ù–∞–∑–∞–≤–∂–¥–∏")],
                    [KeyboardButton("–ù–∞–∑–∞–¥")]
                ], 
                resize_keyboard=True
            )
        )
        return SUBSCRIPTION

async def subscription_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == "–ù–∞–∑–∞–¥":
        await premium_choice(update, context)
        return PREMIUM
    else:
        context.user_data['subscription'] = choice
        user_country = update.message.from_user.language_code  # –ü—Ä–∏–∫–ª–∞–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥—É –∫—Ä–∞—ó–Ω–∏
        currency = get_currency(user_country)
        await update.message.reply_text(
            get_subscription_benefits(choice, currency),
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–ö—É–ø–∏—Ç–∏ –¥–ª—è —Å–µ–±–µ")],
                    [KeyboardButton("–ö—É–ø–∏—Ç–∏ –≤ –ø–æ–¥–∞—Ä—É–Ω–æ–∫")],
                    [KeyboardButton("–ù–∞–∑–∞–¥")]
                ], 
                resize_keyboard=True
            )
        )
        return GIFT

async def gift_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == "–ù–∞–∑–∞–¥":
        user_country = update.message.from_user.language_code
        currency = get_currency(user_country)
        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏:",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–ù–∞ —Ç–∏–∂–¥–µ–Ω—å")],
                    [KeyboardButton("–ù–∞ –º—ñ—Å—è—Ü—å")],
                    [KeyboardButton("–ù–∞ —Ä—ñ–∫")],
                    [KeyboardButton("–ù–∞–∑–∞–≤–∂–¥–∏")],
                    [KeyboardButton("–ù–∞–∑–∞–¥")]
                ], 
                resize_keyboard=True
            )
        )
        return SUBSCRIPTION
    elif choice == "–ö—É–ø–∏—Ç–∏ –¥–ª—è —Å–µ–±–µ":
        user_id = update.message.from_user.id
        duration = context.user_data['subscription']
        if user_id not in user_profiles:
            user_profiles[user_id] = {}
        user_profiles[user_id]['premium'] = {
            'status': True,
            'duration': duration
        }
        await update.message.reply_text(f"–í–∞—à –ø—Ä–µ–º—ñ—É–º-–∞–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –Ω–∞ {duration}!", reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ó–Ω–∞–π–æ–º—Å—Ç–≤–∞")],
                [KeyboardButton("18+")],
                [KeyboardButton("–í–≤–µ—Å—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á")]
            ], 
            resize_keyboard=True
        ))
        return START
    elif choice == "–ö—É–ø–∏—Ç–∏ –≤ –ø–æ–¥–∞—Ä—É–Ω–æ–∫":
        key = generate_unique_key()
        premium_keys[key] = {
            'duration': context.user_data['subscription']
        }
        await update.message.reply_text(f"–í–∞—à —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–∞—Ä—É–Ω–∫—É: {key}", reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ó–Ω–∞–π–æ–º—Å—Ç–≤–∞")],
                [KeyboardButton("18+")],
                [KeyboardButton("–í–≤–µ—Å—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á")]
            ], 
            resize_keyboard=True
        ))
        return START

async def set_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–í–≤–µ—Å—Ç–∏ —ñ–Ω—à–µ —ñ–º'—è":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è:")
        return NAME
    else:
        context.user_data['name'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–∫:")
        return AGE

async def set_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data['age'] = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏:")
        return AGE
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –º—ñ—Å—Ç–æ:")
    return CITY

async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['city'] = update.message.text
    profile = context.user_data
    await update.message.reply_text(
        f"–í–∞—à—ñ –¥–∞–Ω—ñ:\n–Ü–º'—è: {profile['name']}\n–í—ñ–∫: {profile['age']}\n–ú—ñ—Å—Ç–æ: {profile['city']}\n\n–í—Å–µ –≤—ñ—Ä–Ω–æ?",
        reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–¢–∞–∫")],
                [KeyboardButton("–ù—ñ")]
            ], 
            resize_keyboard=True
        )
    )
    return CONFIRMATION

async def confirm_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–¢–∞–∫":
        user_id = update.message.from_user.id
        context.user_data['username'] = update.message.from_user.username
        user_profiles[user_id] = context.user_data

        await update.message.reply_text(
            "–í–∞—à –∞–∫–∞—É–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ! –•–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∫–µ—Ç–∏ —ñ–Ω—à–∏—Ö –ª—é–¥–µ–π?",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∫–µ—Ç–∏")],
                    [KeyboardButton("–ù—ñ")]
                ], 
                resize_keyboard=True
            )
        )
        return VIEW_PROFILES
    else:
        await update.message.reply_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –í–∞—à—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ.",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–ó–Ω–∞–π–æ–º—Å—Ç–≤–∞")],
                    [KeyboardButton("18+")],
                    [KeyboardButton("–í–≤–µ—Å—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á")]
                ], 
                resize_keyboard=True
            )
        )
        return START

async def edit_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–Ü–º'—è":
        user = update.message.from_user
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –Ω–æ–≤–µ —ñ–º'—è –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–µ:",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton(user.first_name)],
                    [KeyboardButton("–í–≤–µ—Å—Ç–∏ —ñ–Ω—à–µ —ñ–º'—è")]
                ], 
                resize_keyboard=True, one_time_keyboard=True
            )
        )
        return NAME
    elif update.message.text == "–í—ñ–∫":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–≤–∏–π –≤—ñ–∫:")
        return AGE
    elif update.message.text == "–ú—ñ—Å—Ç–æ":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –Ω–æ–≤–µ –º—ñ—Å—Ç–æ:")
        return CITY

async def view_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    user_data = user_profiles.get(user_id)
    
    if not user_data:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç.")
        return ConversationHandler.END

    city = user_data.get('city')
    age = user_data.get('age')

    profiles = [profile for uid, profile in user_profiles.items() if uid != user_id and profile['city'] == city and age - 3 <= profile['age'] <= age + 3]

    if profiles:
        random.shuffle(profiles)
        current_profile_index[user_id] = profiles
        await show_next_profile(update, context)
    else:
        await update.message.reply_text("–ù–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")
        return ConversationHandler.END
    return VIEW_PROFILES

async def show_next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id

    if user_id not in current_profile_index or not current_profile_index[user_id]:
        await update.message.reply_text("–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")
        return ConversationHandler.END

    profiles = current_profile_index[user_id]
    next_profile = profiles.pop()
    await update.message.reply_text(
        f"–Ü–º'—è: {next_profile['name']}\n–í—ñ–∫: {next_profile['age']}\n–ú—ñ—Å—Ç–æ: {next_profile['city']}\n",
        reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–∏–π")]
            ], 
            resize_keyboard=True
        )
    )
    return VIEW_PROFILES

async def search_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –ø–æ—à—É–∫—É:")
    return SEARCH_PROFILES

async def process_search_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    city = update.message.text
    user_id = update.message.from_user.id
    user_data = user_profiles.get(user_id)

    if not user_data:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç.")
        return ConversationHandler.END

    user_age = user_data.get('age')
    min_age = user_age - 3
    max_age = user_age + 3

    matching_profiles = [profile for uid, profile in user_profiles.items() if uid != user_id and profile['city'] == city and min_age <= profile['age'] <= max_age]

    if matching_profiles:
        response = "–ó–Ω–∞–π–¥–µ–Ω—ñ –∞–Ω–∫–µ—Ç–∏:\n\n"
        for profile in matching_profiles:
            response += f"–Ü–º'—è: {profile['name']}\n–í—ñ–∫: {profile['age']}\n–ú—ñ—Å—Ç–æ: {profile['city']}\n\n"
    else:
        response = "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä—ñ—è–º."

    await update.message.reply_text(response)
    return ConversationHandler.END
