from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from src.utils import (
    generate_unique_key, get_currency, get_subscription_benefits, 
    search_profiles_by_criteria
)
import random
import requests
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderServiceError

geolocator = Nominatim(user_agent="telegram_bot")

START, NAME, AGE, CITY, LOCATION, GENDER, SEARCH, CONFIRMATION, VIEW_PROFILES, SEARCH_PROFILES, PREMIUM, SUBSCRIPTION, GIFT, ENTER_KEY, AGE_RANGE, MAX_AGE, ADULT_NAME, ADULT_AGE, ADULT_CITY, ADULT_LOCATION, ADULT_GENDER, ADULT_SEARCH, ADULT_CONFIRMATION, ADULT_VIEW_PROFILES = range(24)

user_profiles = {}
current_profile_index = {}
premium_keys = {}

async def send_welcome_premium_message(update: Update, duration: str) -> None:
    await update.message.reply_text(
        f"–í—ñ—Ç–∞—î–º–æ –∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ {duration}!",
        reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ó–Ω–∞–π–æ–º—Å—Ç–≤–∞")],
                [KeyboardButton("18+")],
                [KeyboardButton("–í–≤–µ—Å—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á")]
            ], 
            resize_keyboard=True
        )
    )
    try:
        await update.message.reply_sticker("CAACAgUAAxkBAAIKkWZ13fvfJF-qwg3ix6yvNxd7WERpAAKmAwAC6QrIA3mzkAhrhbH0NQQ")
    except Exception as e:
        print(f"Failed to send sticker: {e}")

async def send_gender_match_sticker(update: Update) -> None:
    try:
        await update.message.reply_sticker("CAACAgIAAxkBAAIKk2Z13glz9gcAATCnSDS6Jpq-lM0BhAACiQIAAladvQqhVs0CITIOPTUE")  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç—ñ–∫–µ—Ä
    except Exception as e:
        print(f"Failed to send gender match sticker: {e}")

async def send_special_gender_match_sticker(update: Update) -> None:
    try:
        await update.message.reply_sticker("CAACAgIAAxkBAAIKk2Z13glz9gcAATCnSDS6Jpq-lM0BhAACiQIAAladvQqhVs0CITIOPTUE")  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç—ñ–∫–µ—Ä
    except Exception as e:
        print(f"Failed to send special gender match sticker: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ó–Ω–∞–π–æ–º—Å—Ç–≤–∞")],
                [KeyboardButton("18+")],
                [KeyboardButton("–í–≤–µ—Å—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á")]
            ], 
            resize_keyboard=True, one_time_keyboard=True
        )
    )
    return START

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    user_id = update.message.from_user.id

    if choice == "18+":
        user_profile = user_profiles.get(user_id)
        if user_profile and user_profile.get('premium', {}).get('status', False):
            await update.message.reply_text(
                "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é 18+:",
                reply_markup=ReplyKeyboardMarkup(
                    [
                        [KeyboardButton(update.message.from_user.first_name)],
                        [KeyboardButton("–í–≤–µ—Å—Ç–∏ —ñ–Ω—à–µ —ñ–º'—è")]
                    ], 
                    resize_keyboard=True, one_time_keyboard=True
                )
            )
            return ADULT_NAME
        else:
            await update.message.reply_text(
                "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º-–∞–∫–∞—É–Ω—Ç.",
                reply_markup=ReplyKeyboardMarkup(
                    [
                        [KeyboardButton("üî¥ –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º")],
                        [KeyboardButton("–ù–∞–∑–∞–¥")]
                    ], 
                    resize_keyboard=True
                )
            )
            return PREMIUM
    elif choice == "–ó–Ω–∞–π–æ–º—Å—Ç–≤–∞":
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton(update.message.from_user.first_name)],
                    [KeyboardButton("–í–≤–µ—Å—Ç–∏ —ñ–Ω—à–µ —ñ–º'—è")]
                ], 
                resize_keyboard=True, one_time_keyboard=True
            )
        )
        return NAME
    elif choice == "–í–≤–µ—Å—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á:")
        return ENTER_KEY

async def enter_key(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    key = update.message.text
    user_id = update.message.from_user.id

    if key in premium_keys:
        duration = premium_keys[key]['duration']
        if user_id not in user_profiles:
            user_profiles[user_id] = {'premium': {}}
        user_profiles[user_id]['premium'] = {
            'status': True,
            'duration': duration
        }
        del premium_keys[key]
        await send_welcome_premium_message(update, duration)
        if duration == "–ù–∞ —Ä—ñ–∫":
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ –¥–ª—è –ø–æ—à—É–∫—É:")
            return AGE_RANGE
    else:
        await update.message.reply_text("–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –Ω–µ–≤—ñ—Ä–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    return START

async def premium_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == "–ù–∞–∑–∞–¥":
        await start(update, context)
        return START
    elif choice == "üî¥ –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º":
        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏:",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–ù–∞ —Ç–∏–∂–¥–µ–Ω—å")],
                    [KeyboardButton("–ù–∞ –º—ñ—Å—è—Ü—å")],
                    [KeyboardButton("–ù–∞ —Ä—ñ–∫")],
                    [KeyboardButton("–ù–∞–∑–∞–¥")]
                ], 
                resize_keyboard=True
            )
        )
        return SUBSCRIPTION

async def subscription_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == "–ù–∞–∑–∞–¥":
        await premium_choice(update, context)
        return PREMIUM
    else:
        context.user_data['subscription'] = choice
        user_country = update.message.from_user.language_code
        currency = get_currency(user_country)
        await update.message.reply_text(
            get_subscription_benefits(choice, currency),
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–ö—É–ø–∏—Ç–∏ –¥–ª—è —Å–µ–±–µ")],
                    [KeyboardButton("–ö—É–ø–∏—Ç–∏ –≤ –ø–æ–¥–∞—Ä—É–Ω–æ–∫")],
                    [KeyboardButton("–ù–∞–∑–∞–¥")]
                ], 
                resize_keyboard=True
            )
        )
        return GIFT

async def gift_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == "–ù–∞–∑–∞–¥":
        user_country = update.message.from_user.language_code
        currency = get_currency(user_country)
        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏:",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–ù–∞ —Ç–∏–∂–¥–µ–Ω—å")],
                    [KeyboardButton("–ù–∞ –º—ñ—Å—è—Ü—å")],
                    [KeyboardButton("–ù–∞ —Ä—ñ–∫")],
                    [KeyboardButton("–ù–∞–∑–∞–¥")]
                ], 
                resize_keyboard=True
            )
        )
        return SUBSCRIPTION
    elif choice == "–ö—É–ø–∏—Ç–∏ –¥–ª—è —Å–µ–±–µ":
        user_id = update.message.from_user.id
        duration = context.user_data['subscription']
        if user_id not in user_profiles:
            user_profiles[user_id] = {}
        user_profiles[user_id]['premium'] = {
            'status': True,
            'duration': duration
        }
        await send_welcome_premium_message(update, duration)
        if duration == "–ù–∞ —Ä—ñ–∫":
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ –¥–ª—è –ø–æ—à—É–∫—É:")
            return AGE_RANGE
        return START
    elif choice == "–ö—É–ø–∏—Ç–∏ –≤ –ø–æ–¥–∞—Ä—É–Ω–æ–∫":
        key = generate_unique_key()
        premium_keys[key] = {
            'duration': context.user_data['subscription']
        }
        await update.message.reply_text(f"–í–∞—à —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–∞—Ä—É–Ω–∫—É: {key}", reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ó–Ω–∞–π–æ–º—Å—Ç–≤–∞")],
                [KeyboardButton("18+")],
                [KeyboardButton("–í–≤–µ—Å—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á")]
            ], 
                resize_keyboard=True
        ))
        return START

async def set_age_range(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        min_age = int(update.message.text)
        context.user_data['min_age'] = min_age
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ –¥–ª—è –ø–æ—à—É–∫—É:")
        return MAX_AGE
    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏:")
        return AGE_RANGE

async def set_max_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        max_age = int(update.message.text)
        context.user_data['max_age'] = max_age
        await update.message.reply_text("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        return START
    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏:")
        return MAX_AGE

async def set_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–∫:")
    return AGE

async def set_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data['age'] = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏:")
        return AGE
    await update.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è–º –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –≤—Ä—É—á–Ω—É.",
        reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è–º", request_location=True)],
                [KeyboardButton("–í–≤–µ—Å—Ç–∏ –º—ñ—Å—Ç–æ –≤—Ä—É—á–Ω—É")]
            ], 
            resize_keyboard=True, one_time_keyboard=True
        )
    )
    return LOCATION

async def get_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.location:
        location = update.message.location
        try:
            user_location = geolocator.reverse(f"{location.latitude}, {location.longitude}", timeout=10)
            city = user_location.raw['address'].get('city', user_location.raw['address'].get('town', ''))
        except GeocoderServiceError as e:
            # –û–±—Ö—ñ–¥ –ø—Ä–æ–±–ª–µ–º–∏ –∑ SSL-—Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–æ–º
            response = requests.get(
                f"https://nominatim.openstreetmap.org/reverse?lat={location.latitude}&lon={location.longitude}&format=json&addressdetails=1",
                verify=False
            )
            if response.status_code == 200:
                user_location = response.json()
                city = user_location.get('address', {}).get('city', user_location.get('address', {}).get('town', ''))
            else:
                await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –º—ñ—Å—Ç–æ –≤—Ä—É—á–Ω—É:")
                return CITY
        context.user_data['city'] = city
        await update.message.reply_text(
            f"–í–∞—à–µ –º—ñ—Å—Ç–æ: {city}.",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton(f"–ó–∞–ª–∏—à–∏—Ç–∏ –º—ñ—Å—Ç–æ ({city})")],
                    [KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É")]
                ], 
                resize_keyboard=True, one_time_keyboard=True
            )
        )
    else:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –º—ñ—Å—Ç–æ:")
        return CITY
    return CITY

async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –º—ñ—Å—Ç–æ:")
        return CITY
    else:
        context.user_data['city'] = update.message.text
        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—å:",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–Ø —Ö–ª–æ–ø–µ—Ü—å üë¶"), KeyboardButton("–Ø –¥—ñ–≤—á–∏–Ω–∞ üëß")]
                ], 
                resize_keyboard=True, one_time_keyboard=True
            )
        )
        return GENDER

async def set_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['gender'] = update.message.text
    await update.message.reply_text(
        "–ö–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —à—É–∫–∞—Ç–∏?",
        reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–®—É–∫–∞—Ç–∏ —Ö–ª–æ–ø—Ü—è üë¶"), KeyboardButton("–®—É–∫–∞—Ç–∏ –¥—ñ–≤—á–∏–Ω—É üëß")]
            ], 
            resize_keyboard=True, one_time_keyboard=True
        )
    )
    return SEARCH

async def process_search_preference(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    search_preference = update.message.text
    context.user_data['search_preference'] = search_preference
    profile = context.user_data

    await update.message.reply_text(
        f"–í–∞—à—ñ –¥–∞–Ω—ñ:\n–Ü–º'—è: {profile['name']}\n–í—ñ–∫: {profile['age']}\n–ú—ñ—Å—Ç–æ: {profile['city']}\n–°—Ç–∞—Ç—å: {profile['gender']}\n–®—É–∫–∞—î: {search_preference.lower()}\n\n–í—Å–µ –≤—ñ—Ä–Ω–æ?",
        reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–¢–∞–∫")],
                [KeyboardButton("–ù—ñ")]
            ], 
            resize_keyboard=True
        )
    )
    return CONFIRMATION

async def confirm_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–¢–∞–∫":
        user_id = update.message.from_user.id
        context.user_data['username'] = update.message.from_user.username
        user_profiles[user_id] = context.user_data

        await update.message.reply_text(
            "–í–∞—à –∞–∫–∞—É–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ! –•–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∫–µ—Ç–∏ —ñ–Ω—à–∏—Ö –ª—é–¥–µ–π?",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∫–µ—Ç–∏")],
                    [KeyboardButton("–ù—ñ")]
                ], 
                resize_keyboard=True
            )
        )
        return VIEW_PROFILES
    else:
        await update.message.reply_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –í–∞—à—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ.",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–ó–Ω–∞–π–æ–º—Å—Ç–≤–∞")],
                    [KeyboardButton("18+")],
                    [KeyboardButton("–í–≤–µ—Å—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á")]
                ], 
                resize_keyboard=True
            )
        )
        return START

async def view_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    user_data = user_profiles.get(user_id)
    
    if not user_data:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç.")
        return ConversationHandler.END

    city = user_data.get('city')
    age = user_data.get('age')
    search_preference = user_data.get('search_preference')
    is_adult = user_data.get('is_adult', False)

    if user_data.get('premium', {}).get('status', False) and user_data['premium'].get('duration') == "–ù–∞ —Ä—ñ–∫":
        min_age = user_data.get('min_age', age - 3)
        max_age = user_data.get('max_age', age + 3)
    else:
        min_age = age - 3
        max_age = age + 3

    profiles = [profile for uid, profile in user_profiles.items() if uid != user_id and profile['city'] == city and profile.get('is_adult', False) == is_adult and min_age <= profile['age'] <= max_age and (search_preference == "–®—É–∫–∞—Ç–∏ –≤—Å—ñ—Ö" or profile['gender'] == search_preference)]

    if profiles:
        random.shuffle(profiles)
        current_profile_index[user_id] = profiles
        await show_next_profile(update, context)
    else:
        await update.message.reply_text("–ù–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")
        return VIEW_PROFILES

async def show_next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id

    if user_id not in current_profile_index or not current_profile_index[user_id]:
        await update.message.reply_text("–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")
        return VIEW_PROFILES

    profiles = current_profile_index[user_id]
    next_profile = profiles.pop()

    user_profile = user_profiles[user_id]
    if user_profile.get('premium', {}).get('status', False):
        if user_profile['gender'] == next_profile['gender']:
            await send_special_gender_match_sticker(update)
        else:
            await send_gender_match_sticker(update)

    await update.message.reply_text(
        f"–Ü–º'—è: {next_profile['name']}\n–í—ñ–∫: {next_profile['age']}\n–ú—ñ—Å—Ç–æ: {next_profile['city']}\n",
        reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–∏–π")]
            ], 
            resize_keyboard=True
        )
    )
    return VIEW_PROFILES

async def search_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –ø–æ—à—É–∫—É:")
    return SEARCH_PROFILES

async def process_search_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    city = update.message.text
    user_id = update.message.from_user.id
    user_data = user_profiles.get(user_id)

    if not user_data:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç.")
        return ConversationHandler.END

    user_age = user_data.get('age')
    min_age = user_age - 3
    max_age = user_age + 3
    search_preference = user_data.get('search_preference')
    is_adult = user_data.get('is_adult', False)

    matching_profiles = search_profiles_by_criteria(user_profiles, city, min_age, max_age, search_preference, is_adult)

    if matching_profiles:
        response = "–ó–Ω–∞–π–¥–µ–Ω—ñ –∞–Ω–∫–µ—Ç–∏:\n\n"
        for profile in matching_profiles:
            response += f"–Ü–º'—è: {profile['name']}\n–í—ñ–∫: {profile['age']}\n–ú—ñ—Å—Ç–æ: {profile['city']}\n\n"
    else:
        response = "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä—ñ—è–º."

    await update.message.reply_text(response)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END
