from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from .constants import SEARCH, CONFIRMATION, VIEW_PROFILES, START, MAIN_MENU_BUTTONS
from src.models import UserProfile
from src.database import SessionLocal
from src.utils import search_profiles_by_criteria

async def process_search_preference(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    raw_choice = update.message.text
    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if raw_choice == "–®—É–∫–∞—Ç–∏ –¥—ñ–≤—á–∏–Ω—É üëß":
        context.user_data['search_preference'] = 'female'
    elif raw_choice == "–®—É–∫–∞—Ç–∏ —Ö–ª–æ–ø—Ü—è üë¶":
        context.user_data['search_preference'] = 'male'
    elif raw_choice == "–®—É–∫–∞—Ç–∏ –≤—Å—ñ—Ö":
        context.user_data['search_preference'] = 'all'
    else:
        context.user_data['search_preference'] = 'all'

    profile = context.user_data
    search_str = "–¥—ñ–≤—á–∏–Ω—É" if profile['search_preference'] == 'female' else "—Ö–ª–æ–ø—Ü—è" if profile['search_preference'] == 'male' else "–≤—Å—ñ—Ö"

    if profile.get('photo'):
        with open(profile['photo'], 'rb') as photo:
            await update.message.reply_photo(photo)

    await update.message.reply_text(
        f"–í–∞—à—ñ –¥–∞–Ω—ñ:\n"
        f"–Ü–º'—è: {profile.get('name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"–í—ñ–∫: {profile.get('age', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ú—ñ—Å—Ç–æ: {profile.get('city', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞—Ç—å: {profile.get('gender', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"–•–æ–±—ñ: {profile.get('hobby', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"–®—É–∫–∞—î: {search_str}\n\n"
        "–í—Å–µ –≤—ñ—Ä–Ω–æ?",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["–¢–∞–∫"],
                ["–ù—ñ"]
            ],
            resize_keyboard=True
        )
    )
    return CONFIRMATION


async def confirm_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–¢–∞–∫":
        user_id = update.message.from_user.id
        profile_data = context.user_data
        premium_info = profile_data.get('premium', {})

        async with SessionLocal() as session:
            user_profile = UserProfile(
                user_id=user_id,  # –¢—É—Ç —É–∂–µ user_id –≤–µ–ª–∏–∫–∏–π int, —Ç–µ–ø–µ—Ä –≤ –ë–î BigInteger
                username=update.message.from_user.username,
                name=profile_data['name'],
                age=profile_data['age'],
                city=profile_data['city'].lower(),  # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –º—ñ—Å—Ç–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
                gender=profile_data['gender'],       # 'male', 'female' –∞–±–æ —ñ–Ω—à–µ
                hobby=profile_data.get('hobby'),
                search_preference=profile_data['search_preference'],  # 'male', 'female' –∞–±–æ 'all'
                photo=profile_data.get('photo'),
                is_adult=False,
                premium_status=premium_info.get('status', False),
                premium_duration=premium_info.get('duration'),
                min_age=profile_data.get('min_age'),
                max_age=profile_data.get('max_age')
            )
            session.add(user_profile)
            await session.commit()

        await update.message.reply_text(
            "–í–∞—à –∞–∫–∞—É–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ! –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∫–µ—Ç–∏ —ñ–Ω—à–∏—Ö?",
            reply_markup=ReplyKeyboardMarkup(
                [
                    ["–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∫–µ—Ç–∏"],
                    ["–ù—ñ"]
                ],
                resize_keyboard=True
            )
        )
        return VIEW_PROFILES
    else:
        await update.message.reply_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True)
        )
        return START

async def view_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    async with SessionLocal() as session:
        user_data = await session.scalar(
            session.select(UserProfile).where(UserProfile.user_id == user_id)
        )
        if not user_data:
            await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç.")
            return START

        city = user_data.city.lower()
        age = user_data.age
        search_preference = user_data.search_preference  # 'male', 'female' –∞–±–æ 'all'
        is_adult = user_data.is_adult

        if user_data.premium_status and user_data.premium_duration == "–ù–∞ —Ä—ñ–∫":
            min_age = user_data.min_age if user_data.min_age else age - 3
            max_age = user_data.max_age if user_data.max_age else age + 3
        else:
            min_age = age - 3
            max_age = age + 3

        # –®—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
        matching_ids = await search_profiles_by_criteria(session, city, min_age, max_age, search_preference, is_adult, user_id)
        if matching_ids:
            context.user_data['profiles'] = matching_ids
            await show_next_profile(update, context)
            return VIEW_PROFILES
        else:
            await update.message.reply_text("–ù–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")
            return VIEW_PROFILES

async def show_next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    profiles = context.user_data.get('profiles', [])

    if not profiles:
        await update.message.reply_text("–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç.")
        return VIEW_PROFILES

    target_user_id = profiles.pop()
    async with SessionLocal() as session:
        target_profile = await session.scalar(
            session.select(UserProfile).where(UserProfile.user_id == target_user_id)
        )

        if not target_profile:
            await update.message.reply_text("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
            return VIEW_PROFILES

        if target_profile.photo:
            with open(target_profile.photo, 'rb') as photo:
                await update.message.reply_photo(photo)

        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–∞–Ω—ñ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
        await update.message.reply_text(
            f"–Ü–º'—è: {target_profile.name}\n"
            f"–í—ñ–∫: {target_profile.age}\n"
            f"–ú—ñ—Å—Ç–æ: {target_profile.city}\n"
            f"–•–æ–±—ñ: {target_profile.hobby if target_profile.hobby else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}",
            reply_markup=ReplyKeyboardMarkup(
                [
                    ["–ù–∞—Å—Ç—É–ø–Ω–∏–π"]
                ],
                resize_keyboard=True
            )
        )
    return VIEW_PROFILES
