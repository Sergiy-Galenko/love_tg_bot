from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from .constants import SEARCH, CONFIRMATION, VIEW_PROFILES, SEARCH_PROFILES, START, MAIN_MENU_BUTTONS, AGE_RANGE, MAX_AGE
from .utils import send_gender_match_sticker
from src.utils import search_profiles_by_criteria
import random

user_profiles = {}
current_profile_index = {}
likes = {}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∞–π–∫–∏

async def process_search_preference(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    search_preference = update.message.text
    context.user_data['search_preference'] = search_preference
    profile = context.user_data

    if profile.get('photo'):
        with open(profile['photo'], 'rb') as photo:
            await update.message.reply_photo(photo)

    await update.message.reply_text(
        f"–í–∞—à—ñ –¥–∞–Ω—ñ:\n–Ü–º'—è: {profile['name']}\n–í—ñ–∫: {profile['age']}\n–ú—ñ—Å—Ç–æ: {profile['city']}\n–°—Ç–∞—Ç—å: {profile['gender']}\n–•–æ–±—ñ: {profile.get('hobby', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n–®—É–∫–∞—î: {search_preference.lower()}\n\n–í—Å–µ –≤—ñ—Ä–Ω–æ?",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["–¢–∞–∫"],
                ["–ù—ñ"]
            ],
            resize_keyboard=True
        )
    )
    return CONFIRMATION

async def confirm_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–¢–∞–∫":
        user_id = update.message.from_user.id
        context.user_data['username'] = update.message.from_user.username
        user_profiles[user_id] = context.user_data

        await update.message.reply_text(
            "–í–∞—à –∞–∫–∞—É–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ! –•–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∫–µ—Ç–∏ —ñ–Ω—à–∏—Ö –ª—é–¥–µ–π?",
            reply_markup=ReplyKeyboardMarkup(
                [
                    ["–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∫–µ—Ç–∏"],
                    ["–ù—ñ"]
                ],
                resize_keyboard=True
            )
        )
        return VIEW_PROFILES
    else:
        await update.message.reply_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –í–∞—à—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ.",
            reply_markup=ReplyKeyboardMarkup(
                MAIN_MENU_BUTTONS,
                resize_keyboard=True
            )
        )
        return START

async def view_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    user_data = user_profiles.get(user_id)

    if not user_data:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç.")
        return START

    city = user_data.get('city')
    age = user_data.get('age')
    search_preference = user_data.get('search_preference')
    is_adult = user_data.get('is_adult', False)

    if user_data.get('premium', {}).get('status', False) and user_data['premium'].get('duration') == "–ù–∞ —Ä—ñ–∫":
        min_age = user_data.get('min_age', age - 3)
        max_age = user_data.get('max_age', age + 3)
    else:
        min_age = age - 3
        max_age = age + 3

    profiles = [
        (uid, profile) for uid, profile in user_profiles.items()
        if uid != user_id and
        profile['city'].lower() == city.lower() and
        min_age <= profile['age'] <= max_age and
        (search_preference == "–®—É–∫–∞—Ç–∏ –≤—Å—ñ—Ö" or profile['gender'] == search_preference) and
        profile.get('is_adult', False) == is_adult
    ]

    if profiles:
        random.shuffle(profiles)
        current_profile_index[user_id] = profiles
        await show_next_profile(update, context)
        return VIEW_PROFILES
    else:
        await update.message.reply_text("–ù–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")
        return VIEW_PROFILES

async def show_next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id

    user_message = update.message.text.lower() if update.message.text else ""

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –õ–∞–π–∫/–î–∏–∑–ª–∞–π–∫/–ù–∞—Å—Ç—É–ø–Ω–∏–π –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ—Ñ—ñ–ª—é
    if user_id in current_profile_index and current_profile_index[user_id]:
        if user_message in ["–ª–∞–π–∫", "–¥–∏–∑–ª–∞–π–∫", "–Ω–∞—Å—Ç—É–ø–Ω–∏–π"]:
            profiles = current_profile_index[user_id]
            current_profile = profiles[-1]  # –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
            target_user_id, target_profile = current_profile

            if user_message == "–ª–∞–π–∫":
                if user_id not in likes:
                    likes[user_id] = set()
                if target_user_id not in likes[user_id]:
                    likes[user_id].add(target_user_id)
                    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —Ç–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ –π–æ–≥–æ —Ö—Ç–æ—Å—å –ª–∞–π–∫–Ω—É–≤
                    await context.bot.send_message(chat_id=target_user_id, text="–í–∞—Å —Ö—Ç–æ—Å—å –≤–ø–æ–¥–æ–±–∞–≤! üåπ")
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∑–∞—î–º–Ω—ñ—Å—Ç—å
                    if target_user_id in likes and user_id in likes[target_user_id]:
                        # –ú–∞—Ç—á!
                        await update.message.reply_text("–¶–µ –º–∞—Ç—á! –í–∏ —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫–æ–≥–æ –≤–∏ –ª–∞–π–∫–Ω—É–ª–∏, –≤–ø–æ–¥–æ–±–∞–ª–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ üíû")
                        await context.bot.send_message(chat_id=target_user_id, text="–¶–µ –º–∞—Ç—á! –í–∏ —ñ —Ç–æ–π, —Ö—Ç–æ –≤–∞—Å –ª–∞–π–∫–Ω—É–≤, –≤–ø–æ–¥–æ–±–∞–ª–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ üíû")

            # –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ "–ù–∞—Å—Ç—É–ø–Ω–∏–π", –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
            if user_message == "–Ω–∞—Å—Ç—É–ø–Ω–∏–π":
                profiles.pop()

    # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å, —è–∫—â–æ –≤—ñ–Ω —î
    if user_id not in current_profile_index or not current_profile_index[user_id]:
        await update.message.reply_text("–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")
        return VIEW_PROFILES

    profiles = current_profile_index[user_id]
    next_profile = profiles[-1]  # –ù–µ –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ, –ø–æ–∫–∏ –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç—å "–ù–∞—Å—Ç—É–ø–Ω–∏–π"
    _, profile_data = next_profile

    user_profile = user_profiles[user_id]
    if user_profile.get('premium', {}).get('status', False):
        await send_gender_match_sticker(update)

    if profile_data.get('photo'):
        with open(profile_data['photo'], 'rb') as photo:
            await update.message.reply_photo(photo)
    await update.message.reply_text(
        f"–Ü–º'—è: {profile_data['name']}\n–í—ñ–∫: {profile_data['age']}\n–ú—ñ—Å—Ç–æ: {profile_data['city']}\n–•–æ–±—ñ: {profile_data.get('hobby', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["–õ–∞–π–∫", "–î–∏–∑–ª–∞–π–∫", "–ù–∞—Å—Ç—É–ø–Ω–∏–π"]
            ],
            resize_keyboard=True
        )
    )
    return VIEW_PROFILES

async def process_search_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    search_city = update.message.text
    user_id = update.message.from_user.id
    user_data = user_profiles.get(user_id)

    if not user_data:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç.")
        return START

    search_preference = user_data.get('search_preference')
    age = user_data.get('age')
    is_adult = user_data.get('is_adult', False)

    if user_data.get('premium', {}).get('status', False) and user_data['premium'].get('duration') == "–ù–∞ —Ä—ñ–∫":
        min_age = user_data.get('min_age', age - 3)
        max_age = user_data.get('max_age', age + 3)
    else:
        min_age = age - 3
        max_age = age + 3

    matching_profiles = search_profiles_by_criteria(user_profiles, search_city, min_age, max_age, search_preference, is_adult)

    if matching_profiles:
        response = "–ó–Ω–∞–π–¥–µ–Ω—ñ –∞–Ω–∫–µ—Ç–∏:\n\n"
        for profile in matching_profiles:
            response += f"–Ü–º'—è: {profile['name']}\n–í—ñ–∫: {profile['age']}\n–ú—ñ—Å—Ç–æ: {profile['city']}\n–•–æ–±—ñ: {profile.get('hobby', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n\n"
    else:
        response = "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä—ñ—è–º."

    await update.message.reply_text(response)
    return START
