from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from .constants import PREMIUM, SUBSCRIPTION, GIFT, START, MAIN_MENU_BUTTONS, AGE_RANGE
from src.utils import generate_unique_key, get_currency, get_subscription_benefits

premium_keys = {}

async def premium_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
            reply_markup=ReplyKeyboardMarkup(
                MAIN_MENU_BUTTONS,
                resize_keyboard=True, one_time_keyboard=True
            )
        )
        return START
    elif choice == "üî¥ –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º":
        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏:",
            reply_markup=ReplyKeyboardMarkup(
                [
                    ["–ù–∞ —Ç–∏–∂–¥–µ–Ω—å"],
                    ["–ù–∞ –º—ñ—Å—è—Ü—å"],
                    ["–ù–∞ —Ä—ñ–∫"],
                    ["–ù–∞–∑–∞–¥"]
                ],
                resize_keyboard=True
            )
        )
        return SUBSCRIPTION

async def subscription_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == "–ù–∞–∑–∞–¥":
        await premium_choice(update, context)
        return PREMIUM
    else:
        context.user_data['subscription'] = choice
        user_country = update.message.from_user.language_code
        currency = get_currency(user_country)
        await update.message.reply_text(
            get_subscription_benefits(choice, currency),
            reply_markup=ReplyKeyboardMarkup(
                [
                    ["–ö—É–ø–∏—Ç–∏ –¥–ª—è —Å–µ–±–µ"],
                    ["–ö—É–ø–∏—Ç–∏ –≤ –ø–æ–¥–∞—Ä—É–Ω–æ–∫"],
                    ["–ù–∞–∑–∞–¥"]
                ],
                resize_keyboard=True
            )
        )
        return GIFT

async def gift_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == "–ù–∞–∑–∞–¥":
        await subscription_choice(update, context)
        return SUBSCRIPTION
    elif choice == "–ö—É–ø–∏—Ç–∏ –¥–ª—è —Å–µ–±–µ":
        duration = context.user_data['subscription']
        if 'profile' not in context.user_data:
            context.user_data['profile'] = {}
        context.user_data['profile']['premium'] = {
            'status': True,
            'duration': duration
        }
        await update.message.reply_text(f"–ü—Ä–µ–º—ñ—É–º –Ω–∞ {duration} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!")
        if duration == "–ù–∞ —Ä—ñ–∫":
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ –¥–ª—è –ø–æ—à—É–∫—É:")
            return AGE_RANGE
        return START
    elif choice == "–ö—É–ø–∏—Ç–∏ –≤ –ø–æ–¥–∞—Ä—É–Ω–æ–∫":
        key = generate_unique_key()
        premium_keys[key] = {
            'duration': context.user_data['subscription']
        }
        await update.message.reply_text(
            f"–í–∞—à —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–∞—Ä—É–Ω–∫—É: {key}",
            reply_markup=ReplyKeyboardMarkup(
                MAIN_MENU_BUTTONS,
                resize_keyboard=True
            )
        )
        return START
